debug(ls)
ls()
12
str(x)
makeVector <- function(x = numeric()) {
}
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
##
##
makeV
makeVector(4)
x <- makeVector(4)
x
makeVector(1)
cachemean <- function(x, ...)
{
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
##
cachemean()
cachemean(x)
x
makeVector(13)
cachemean(x)
makeVector(13)
?<<-
x <<- y
x
y
mean(x)
makeVector()
makeVector(10000)
cachemean()
cachemean(10000)
cachemean(x)
cachemean <- function(x, ...)
{
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
##
##
cachemean(3)
x
library(xlsx)
install.packages('xlsx')
library(xlsx)
library(xlsx)
install.packages('xlsx')
library(xlsx)
library(stringr)
install.packages('WriteXLS')
library(WriteXLS)
ls()
getwd()
library(XLConnect)
library(XLConnectJars)
library(xlsx)
install.packages('XLConnect')
library('XLConnect')
install.packages('XLConnectJars')
library('XLConnectJars')
install.packages(c("crayon", "httr", "manipulate", "R6", "RCurl", "stringi"))
install.packages(c("XLConnect", "XLConnectJars"))
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("xlsx")
library(xlsx)
options(java.home="C:\\Program Files\\Java\\jre1.8.0_45")
library(rJava)
options(java.home="C:\Program Files (x86)\Java\jre1.8.0_51")
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_51")
library(rJava)
install.packages('rjava')
install.packages('rJava')
library(rJava)
install.packages('XLConnect')
install.packages('XLConnectJars')
library(XLConnect)
library(stringr)
library(rJava)
library(xlsx)
library(XML)
library(jsonlite)
library(RmySQL)
library(httr)
library(swirl)
swirl()
install.packages("dplyr")
swirl()
install.packages("dplyr")
install.packages("dplyr")
library(stringr)
library(rJava)
library(xlsx)
library(XML)
library(jsonlite)
)
library(httr)
library(httr)
install.packages("rmysql")
library(RMySQL)
library(swirl)
ls()
rm(list=ls())
swirl()
install.packages('dplyr')
install.packages("dplyr")
getwd()
library(BH)
library(dplyr)
install.packages("dplyr")
library(dplyr)
swirl()
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion('dplyr')
cran <- tbl_df(mydf)
rm('mydf')
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -X:-size)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version =='3.1.1', country == 'US')
?Comparison
filter(cran, r_version <='3.0.2', country == 'IN')
filter(cran, country == 'US' | country == 'IN')
filter(cran, size > 10500 | r_os == 'linux-gnu')
filter(cran, size > 10500, r_os == 'linux-gnu')
filter(cran, size > 100500, r_os == 'linux-gnu')
filter(cran, !is.na(r_version))
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, corret_size = 1000)
mutate(cran3, corret_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(stringr)
library(rJava)
library(xlsx)
library(XML)
library(jsonlite)
library(RMySQL)
library(httr)
library(dplyr)
library(swirl)
swirl()
library(dplyr)
con = url('http://cran-logs.rstudio.com/')
0
info()
bye()
con
htmlCode = readLines(con)
head(htmlCode)
nrow(htmlCode)
tail(htmlCode)
head(htmlCode, 30)
df <- read.csv('2014-07-08-r.csv')
getwd()
df <- read.csv('2014-07-08-r.csv')
cran <- tbl_df(df)
cran
swirl()
head(mydf)
cran <- tbl_df(mydf)
rm('mydf')
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc=count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(stringr)
library(rJava)
library(xlsx)
library(XML)
library(jsonlite)
library(RMySQL)
library(httr)
library(dplyr)
load('ClaroTV_002.RData')
library(stringr)
library(httr)
library(rJava)
library(xlsx)
library(XML)
library(jsonlite)
library(RMySQL)
library(dplyr)
library('swirl')
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, -grade)
res <- gather(students2, male_1, -grade)
?gather
res <- gather(students2, key = male_1, -grade)
res <- gather(students2, key = c(male_1, sex, class, -grade)
)
res <- gather(students2, key = c(male_1, sex, class), -grade)
res <- gather(students2)
res <- gather( students2, sex_class, count, -grade)
res
?separate
res1 <- separate(data = res, col = sex_class, into = c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
students2 %>%
gather(sex_class ,count , -grade ) %>%
separate(sex_class , c("sex", "class")) %>%
print
reset()
?
)
swirl()
submit
submit()
submit()
students3
submit()
submit()
student3
students3
submit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
swirl()
bye()
list(gather)
library(swirl)
install_from_swirl("Exploratory_Data_Analysis")
swirl()
## scripts for 1st project in Exploratory Data Analysis
##
setwd("~/ProgAssig1_exdata")
##
##      get the file in web
if(!file.exists("exdata-data-household_power_consumption.zip")) {
temp <- tempfile()
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
file <- unzip(temp)
unlink(temp)
}
##      calculate how much memory you need
##      The dataset has 2,075,259 rows and 9 columns.
##      # rows * # columns * 8 bytes / 2^20
> memory.size()
[1] 551.42
2075259 * 9 * 8 / 2^20
[1] 142.4967
##      read the file
hpcFull <- read.table('household_power_consumption.txt', header=TRUE, sep=";")
##      fix date
hpcFull$Date <- as.Date(hpcFull$Date, format="%d/%m/%Y")
##      Subsetting the data
hpcDays <- hpcFull[(hpcFull$Date=="2007-02-01") | (hpcFull$Date=="2007-02-02"),]
##      fix numeric cols
hpcDays$Global_active_power <- as.numeric(as.character(hpcDays$Global_active_power))
hpcDays$Global_reactive_power <- as.numeric(as.character(hpcDays$Global_reactive_power))
hpcDays$Voltage <- as.numeric(as.character(hpcDays$Voltage))
hpcDays$Sub_metering_1 <- as.numeric(as.character(hpcDays$Sub_metering_1))
hpcDays$Sub_metering_2 <- as.numeric(as.character(hpcDays$Sub_metering_2))
hpcDays$Sub_metering_3 <- as.numeric(as.character(hpcDays$Sub_metering_3))
hpcDays <- transform(hpcDays, timestamp=as.POSIXct(paste(Date, Time)))
##      make Plot #1
hist(hpcDays$Global_active_power,
main = paste("Global Active Power"),
col="red", xlab="Global Active Power (kilowatts)")
##       create the output
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Plot1.png saved in", getwd())
##       save data created
save(hpcDays, file = 'hpcDays_data.Rda')
## scripts for 1st project in Exploratory Data Analysis
##
## Generating Plot 2
setwd("~/ProgAssig1_exdata")
##      load data
load('hpcDays_data.Rda')
##      make Plot #2
plot(hpcDays$timestamp,hpcDays$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot2.png", width=480, height=480)
#       create the output
dev.off()
cat("plot2.png saved in", getwd())
## scripts for 1st project in Exploratory Data Analysis
##
## Generating Plot 3
setwd("~/ProgAssig1_exdata")
##      load data
load('hpcDays_data.Rda')
##      make Plot #3
plot(hpcDays$timestamp,hpcDays$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpcDays$timestamp,hpcDays$Sub_metering_2,col="red")
lines(hpcDays$timestamp,hpcDays$Sub_metering_3,col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), lwd=c(1,1))
#       create the output
dev.copy(png, file="plot3.png", width=480, height=480)
dev.off()
cat("plot3.png saved in", getwd())
## scripts for 1st project in Exploratory Data Analysis
##
## Generating Plot 4
setwd("~/ProgAssig1_exdata")
##      load data
load('hpcDays_data.Rda')
##      create the grid
par(mfrow=c(2,2))
##      make Plot #1
plot(hpcDays$timestamp,hpcDays$Global_active_power, type="l", xlab="", ylab="Global Active Power")
##      make Plot #2
plot(hpcDays$timestamp,hpcDays$Voltage, type="l", xlab="datetime", ylab="Voltage")
##      make Plot #3
plot(hpcDays$timestamp,hpcDays$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpcDays$timestamp,hpcDays$Sub_metering_2,col="red")
lines(hpcDays$timestamp,hpcDays$Sub_metering_3,col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), bty="n", cex=.5) #bty removes the box, cex shrinks the text, spacing added after labels so it renders correctly
##      make Plot #4
plot(hpcDays$timestamp,hpcDays$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
#       create the output
dev.copy(png, file="plot4.png", width=480, height=480)
dev.off()
cat("plot4.png saved in", getwd())
## scripts for 1st project in Exploratory Data Analysis
##
## Generating Plot 2
setwd("~/ProgAssig1_exdata")
##      load data
load('hpcDays_data.Rda')
##      make Plot #2
plot(hpcDays$timestamp,hpcDays$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot2.png", width=480, height=480)
#       create the output
dev.off()
cat("plot2.png saved in", getwd())
## scripts for 1st project in Exploratory Data Analysis
##
## Generating Plot 4
setwd("~/ProgAssig1_exdata")
##      load data
load('hpcDays_data.Rda')
##      create the grid
par(mfrow=c(2,2))
##      make Plot #1
plot(hpcDays$timestamp,hpcDays$Global_active_power, type="l", xlab="", ylab="Global Active Power")
##      make Plot #2
plot(hpcDays$timestamp,hpcDays$Voltage, type="l", xlab="datetime", ylab="Voltage")
##      make Plot #3
plot(hpcDays$timestamp,hpcDays$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpcDays$timestamp,hpcDays$Sub_metering_2,col="red")
lines(hpcDays$timestamp,hpcDays$Sub_metering_3,col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), bty="n", cex=.5) #bty removes the box, cex shrinks the text, spacing added after labels so it renders correctly
##      make Plot #4
plot(hpcDays$timestamp,hpcDays$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
#       create the output
dev.copy(png, file="plot4.png", width=480, height=480)
dev.off()
cat("plot4.png saved in", getwd())
par(mfrow=c(1,1))
hist(hpcDays$Global_active_power,
main = paste("Global Active Power"),
col="red", xlab="Global Active Power (kilowatts)")
par(mfrow=c(1,1))
##       create the output
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Plot1.png saved in", getwd())
##      make Plot #1
par(mfrow=c(1,1))
hist(hpcDays$Global_active_power,
main = paste("Global Active Power"),
col="red", xlab="Global Active Power (kilowatts)")
##       create the output
dev.copy(png, file="plot1.png", width=480, height=480)
dev.off()
cat("Plot1.png saved in", getwd())
##      make Plot #2
par(mfrow=c(1,1))
plot(hpcDays$timestamp,hpcDays$Global_active_power, type="l", xlab="", ylab="Global Active Power (kilowatts)")
dev.copy(png, file="plot2.png", width=480, height=480)
#       create the output
dev.off()
cat("plot2.png saved in", getwd())
##      make Plot #3
par(mfrow=c(1,1))
plot(hpcDays$timestamp,hpcDays$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpcDays$timestamp,hpcDays$Sub_metering_2,col="red")
lines(hpcDays$timestamp,hpcDays$Sub_metering_3,col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), lwd=c(1,1))
#       create the output
dev.copy(png, file="plot3.png", width=480, height=480)
dev.off()
cat("plot3.png saved in", getwd())
##      create the grid
par(mfrow=c(2,2))
##      make Plot #1
plot(hpcDays$timestamp,hpcDays$Global_active_power, type="l", xlab="", ylab="Global Active Power")
##      make Plot #2
plot(hpcDays$timestamp,hpcDays$Voltage, type="l", xlab="datetime", ylab="Voltage")
##      make Plot #3
plot(hpcDays$timestamp,hpcDays$Sub_metering_1, type="l", xlab="", ylab="Energy sub metering")
lines(hpcDays$timestamp,hpcDays$Sub_metering_2,col="red")
lines(hpcDays$timestamp,hpcDays$Sub_metering_3,col="blue")
legend("topright", col=c("black","red","blue"), c("Sub_metering_1  ","Sub_metering_2  ", "Sub_metering_3  "),lty=c(1,1), bty="n", cex=.5) #bty removes the box, cex shrinks the text, spacing added after labels so it renders correctly
##      make Plot #4
plot(hpcDays$timestamp,hpcDays$Global_reactive_power, type="l", xlab="datetime", ylab="Global_reactive_power")
#       create the output
dev.copy(png, file="plot4.png", width=480, height=480)
dev.off()
cat("plot4.png saved in", getwd())
